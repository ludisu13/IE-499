$date
	Mon Jun 20 00:11:10 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$var wire 64 ! data [63:0] $end
$var wire 1 " fifo_empty $end
$var wire 1 # fifo_full $end
$var wire 64 $ q [63:0] $end
$var wire 1 % read_clock $end
$var wire 1 & read_enable $end
$var wire 1 ' reset $end
$var wire 1 ( write_clock $end
$var wire 1 ) write_enable $end
$scope module fifo1 $end
$var wire 3 * almost_empty [2:0] $end
$var wire 3 + almost_full [2:0] $end
$var wire 64 , data [63:0] $end
$var wire 1 % read_clock $end
$var wire 1 & read_enable $end
$var wire 1 ' reset $end
$var wire 1 ( write_clock $end
$var wire 1 ) write_enable $end
$var reg 1 - fifo_empty $end
$var reg 1 . fifo_full $end
$var reg 64 / q [63:0] $end
$var reg 3 0 read_pointer [2:0] $end
$var reg 3 1 write_pointer [2:0] $end
$upscope $end
$scope module gen_fifo $end
$var wire 64 2 data [63:0] $end
$var wire 1 % read_clock $end
$var wire 1 & read_enable $end
$var wire 1 ' reset $end
$var wire 1 ( write_clock $end
$var wire 1 ) write_enable $end
$scope module rcg $end
$var reg 1 3 clock $end
$upscope $end
$scope module wcg $end
$var reg 1 4 clock $end
$upscope $end
$scope module resg $end
$var reg 1 5 reset $end
$upscope $end
$scope module datg $end
$var reg 64 6 data [63:0] $end
$upscope $end
$scope module weng $end
$var reg 1 7 we $end
$upscope $end
$scope module reng $end
$var reg 1 8 re $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
08
07
b0 6
05
04
03
b0 2
bx 1
bx 0
bx /
x.
x-
b0 ,
bx +
bx *
0)
0(
0'
0&
0%
bx $
x#
x"
b0 !
$end
#40000
14
1(
13
1%
b1 6
b1 !
b1 ,
b1 2
#50000
b111 *
b111 +
b0 /
b0 $
1-
1"
0.
0#
b0 1
b0 0
15
1'
#60000
04
0(
03
0%
#80000
14
1(
13
1%
b10 6
b10 !
b10 ,
b10 2
#100000
04
0(
03
0%
05
0'
#120000
14
1(
13
1%
b11 6
b11 !
b11 ,
b11 2
#140000
04
0(
03
0%
#160000
14
1(
13
1%
b100 6
b100 !
b100 ,
b100 2
#180000
04
0(
03
0%
#200000
14
1(
13
1%
b101 6
b101 !
b101 ,
b101 2
#220000
04
0(
03
0%
#240000
14
1(
13
1%
b110 6
b110 !
b110 ,
b110 2
#260000
04
0(
03
0%
#280000
14
1(
13
1%
b111 6
b111 !
b111 ,
b111 2
#300000
04
0(
03
0%
#320000
b0 *
b110 +
b1 1
0-
0"
14
1(
13
1%
b1000 6
b1000 !
b1000 ,
b1000 2
17
1)
#340000
04
0(
03
0%
#360000
b1 *
b101 +
b10 1
14
1(
13
1%
b1001 6
b1001 !
b1001 ,
b1001 2
#380000
04
0(
03
0%
#400000
14
1(
13
1%
b1010 6
b1010 !
b1010 ,
b1010 2
07
0)
#420000
04
0(
03
0%
#440000
14
1(
13
1%
b1011 6
b1011 !
b1011 ,
b1011 2
#460000
04
0(
03
0%
#480000
b0 *
b110 +
b1 0
b1000 /
b1000 $
14
1(
13
1%
b1100 6
b1100 !
b1100 ,
b1100 2
18
1&
#500000
04
0(
03
0%
#520000
b111 *
b111 +
b10 0
b1001 /
b1001 $
1-
1"
14
1(
13
1%
b1101 6
b1101 !
b1101 ,
b1101 2
#540000
04
0(
03
0%
#560000
14
1(
13
1%
b1110 6
b1110 !
b1110 ,
b1110 2
#580000
04
0(
03
0%
#600000
14
1(
13
1%
b1111 6
b1111 !
b1111 ,
b1111 2
#620000
04
0(
03
0%
#640000
14
1(
13
1%
b10000 6
b10000 !
b10000 ,
b10000 2
#660000
04
0(
03
0%
#680000
14
1(
13
1%
b10001 6
b10001 !
b10001 ,
b10001 2
#700000
04
0(
03
0%
#720000
b0 *
b110 +
b11 1
0-
0"
14
1(
13
1%
b10010 6
b10010 !
b10010 ,
b10010 2
17
1)
#740000
04
0(
03
0%
#760000
b100 1
b11 0
b10010 /
b10010 $
0-
0"
14
1(
13
1%
b10011 6
b10011 !
b10011 ,
b10011 2
#780000
04
0(
03
0%
#800000
b111 *
b111 +
b100 0
b10011 /
b10011 $
1-
1"
14
1(
13
1%
b10100 6
b10100 !
b10100 ,
b10100 2
07
0)
#820000
04
0(
03
0%
#840000
14
1(
13
1%
b10101 6
b10101 !
b10101 ,
b10101 2
#860000
04
0(
03
0%
#880000
14
1(
13
1%
b10110 6
b10110 !
b10110 ,
b10110 2
#900000
04
0(
03
0%
#920000
14
1(
13
1%
b10111 6
b10111 !
b10111 ,
b10111 2
#940000
04
0(
03
0%
#960000
14
1(
13
1%
b11000 6
b11000 !
b11000 ,
b11000 2
#980000
04
0(
03
0%
08
0&
#1000000
14
1(
13
1%
b11001 6
b11001 !
b11001 ,
b11001 2
#1020000
04
0(
03
0%
#1040000
14
1(
13
1%
b11010 6
b11010 !
b11010 ,
b11010 2
#1060000
04
0(
03
0%
#1080000
14
1(
13
1%
b11011 6
b11011 !
b11011 ,
b11011 2
#1100000
04
0(
03
0%
